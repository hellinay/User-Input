[{"D:\\GitHubPro\\UserForms\\src\\index.js":"1","D:\\GitHubPro\\UserForms\\src\\App.js":"2","D:\\GitHubPro\\UserForms\\src\\components\\SimpleInput.js":"3","D:\\GitHubPro\\User Input\\src\\index.js":"4","D:\\GitHubPro\\User Input\\src\\App.js":"5","D:\\GitHubPro\\User Input\\src\\components\\SimpleInput.js":"6"},{"size":142,"mtime":1616595887000,"results":"7","hashOfConfig":"8"},{"size":168,"mtime":1616595983000,"results":"9","hashOfConfig":"8"},{"size":2647,"mtime":1648465519827,"results":"10","hashOfConfig":"8"},{"size":142,"mtime":1616595887000,"results":"11","hashOfConfig":"12"},{"size":168,"mtime":1616595983000,"results":"13","hashOfConfig":"12"},{"size":2647,"mtime":1648465519827,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vt9tr0",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k6pu1p",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"D:\\GitHubPro\\UserForms\\src\\index.js",[],"D:\\GitHubPro\\UserForms\\src\\App.js",[],"D:\\GitHubPro\\UserForms\\src\\components\\SimpleInput.js",["28","29","30","31","32","33"],"D:\\GitHubPro\\User Input\\src\\index.js",[],"D:\\GitHubPro\\User Input\\src\\App.js",[],"D:\\GitHubPro\\User Input\\src\\components\\SimpleInput.js",["34","35","36","37","38","39"],"import { findAllByDisplayValue } from \"@testing-library/react\";\nimport { useRef, useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.production.min\";\n\nconst SimpleInput = (props) => {\n  \n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  //let formIsValid=false;\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsValid = !enteredNameIsValid && enteredNameTouched;\n\n  const eMailInputRef = useRef();\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailIsValid, setEnteredEmailValid] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  useEffect(() => {\n    if (enteredNameIsValid)\n      //check others also\n      setFormIsValid(true);\n    else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid]); //can check age, city... ect.\n  console.log(setFormIsValid)\n\n  function eMailInputChangeHandler(event) {\n    setEnteredEmail(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      setEnteredEmailValid(true);\n    }\n  }\n\n  function eMailInputBlurHandler(params) {\n    setEnteredEmailTouched(true);\n\n    if (enteredEmail.trim() === \"\") {\n      setEnteredEmailValid(false);\n    }\n  }\n\n  function nameInputChangeHandler(event) {\n    setEnteredName(event.target.value);\n  }\n\n  function nameInputBlurHandler(params) {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameTouched(true);\n    }\n  }\n\n  function formSubmissionHandler(event) {\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    if (!enteredName.trim()) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n  }\n\n  const nameInputClasses = nameInputIsValid\n    ? \"form-control invalid\"\n    : \"form-control \";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n       {nameInputIsValid && <p> Name must not be empty.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n",{"ruleId":"40","severity":1,"message":"41","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":31},{"ruleId":"40","severity":1,"message":"44","line":17,"column":9,"nodeType":"42","messageId":"43","endLine":17,"endColumn":22},{"ruleId":"40","severity":1,"message":"45","line":19,"column":10,"nodeType":"42","messageId":"43","endLine":19,"endColumn":29},{"ruleId":"40","severity":1,"message":"46","line":20,"column":10,"nodeType":"42","messageId":"43","endLine":20,"endColumn":29},{"ruleId":"40","severity":1,"message":"47","line":32,"column":12,"nodeType":"42","messageId":"43","endLine":32,"endColumn":35},{"ruleId":"40","severity":1,"message":"48","line":40,"column":12,"nodeType":"42","messageId":"43","endLine":40,"endColumn":33},{"ruleId":"40","severity":1,"message":"41","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":31},{"ruleId":"40","severity":1,"message":"44","line":17,"column":9,"nodeType":"42","messageId":"43","endLine":17,"endColumn":22},{"ruleId":"40","severity":1,"message":"45","line":19,"column":10,"nodeType":"42","messageId":"43","endLine":19,"endColumn":29},{"ruleId":"40","severity":1,"message":"46","line":20,"column":10,"nodeType":"42","messageId":"43","endLine":20,"endColumn":29},{"ruleId":"40","severity":1,"message":"47","line":32,"column":12,"nodeType":"42","messageId":"43","endLine":32,"endColumn":35},{"ruleId":"40","severity":1,"message":"48","line":40,"column":12,"nodeType":"42","messageId":"43","endLine":40,"endColumn":33},"no-unused-vars","'findAllByDisplayValue' is defined but never used.","Identifier","unusedVar","'eMailInputRef' is assigned a value but never used.","'enteredEmailIsValid' is assigned a value but never used.","'enteredEmailTouched' is assigned a value but never used.","'eMailInputChangeHandler' is defined but never used.","'eMailInputBlurHandler' is defined but never used."]